/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	claim_component,
	claim_space,
	create_component,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Hero from '../components/hero.js';
import About from '../components/about.js';
import Steps from '../components/steps.js';
import Features from '../components/features.js';
import Services from '../components/services.js';
import Testimonials from '../components/testimonials.js';
import Portfolio from '../components/portfolio.js';
import Team from '../components/team.js';
import FAQ from '../components/faq.js';
import Contact from '../components/contact.js';

function create_fragment(ctx) {
	let hero;
	let t0;
	let about;
	let t1;
	let steps;
	let t2;
	let features;
	let t3;
	let services;
	let t4;
	let testimonials;
	let t5;
	let portfolio;
	let t6;
	let team;
	let t7;
	let faq;
	let t8;
	let contact;
	let current;
	hero = new Hero({});
	about = new About({});
	steps = new Steps({});
	features = new Features({});
	services = new Services({});
	testimonials = new Testimonials({});
	portfolio = new Portfolio({});
	team = new Team({});
	faq = new FAQ({});
	contact = new Contact({});

	return {
		c() {
			create_component(hero.$$.fragment);
			t0 = space();
			create_component(about.$$.fragment);
			t1 = space();
			create_component(steps.$$.fragment);
			t2 = space();
			create_component(features.$$.fragment);
			t3 = space();
			create_component(services.$$.fragment);
			t4 = space();
			create_component(testimonials.$$.fragment);
			t5 = space();
			create_component(portfolio.$$.fragment);
			t6 = space();
			create_component(team.$$.fragment);
			t7 = space();
			create_component(faq.$$.fragment);
			t8 = space();
			create_component(contact.$$.fragment);
		},
		l(nodes) {
			claim_component(hero.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(about.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(steps.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(features.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(services.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(testimonials.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(portfolio.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(team.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(faq.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(contact.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(hero, target, anchor);
			insert(target, t0, anchor);
			mount_component(about, target, anchor);
			insert(target, t1, anchor);
			mount_component(steps, target, anchor);
			insert(target, t2, anchor);
			mount_component(features, target, anchor);
			insert(target, t3, anchor);
			mount_component(services, target, anchor);
			insert(target, t4, anchor);
			mount_component(testimonials, target, anchor);
			insert(target, t5, anchor);
			mount_component(portfolio, target, anchor);
			insert(target, t6, anchor);
			mount_component(team, target, anchor);
			insert(target, t7, anchor);
			mount_component(faq, target, anchor);
			insert(target, t8, anchor);
			mount_component(contact, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(hero.$$.fragment, local);
			transition_in(about.$$.fragment, local);
			transition_in(steps.$$.fragment, local);
			transition_in(features.$$.fragment, local);
			transition_in(services.$$.fragment, local);
			transition_in(testimonials.$$.fragment, local);
			transition_in(portfolio.$$.fragment, local);
			transition_in(team.$$.fragment, local);
			transition_in(faq.$$.fragment, local);
			transition_in(contact.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(hero.$$.fragment, local);
			transition_out(about.$$.fragment, local);
			transition_out(steps.$$.fragment, local);
			transition_out(features.$$.fragment, local);
			transition_out(services.$$.fragment, local);
			transition_out(testimonials.$$.fragment, local);
			transition_out(portfolio.$$.fragment, local);
			transition_out(team.$$.fragment, local);
			transition_out(faq.$$.fragment, local);
			transition_out(contact.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(hero, detaching);
			if (detaching) detach(t0);
			destroy_component(about, detaching);
			if (detaching) detach(t1);
			destroy_component(steps, detaching);
			if (detaching) detach(t2);
			destroy_component(features, detaching);
			if (detaching) detach(t3);
			destroy_component(services, detaching);
			if (detaching) detach(t4);
			destroy_component(testimonials, detaching);
			if (detaching) detach(t5);
			destroy_component(portfolio, detaching);
			if (detaching) detach(t6);
			destroy_component(team, detaching);
			if (detaching) detach(t7);
			destroy_component(faq, detaching);
			if (detaching) detach(t8);
			destroy_component(contact, detaching);
		}
	};
}

let postsPerPage = 3;

function instance($$self, $$props, $$invalidate) {
	let currentPage;
	let postRangeHigh;
	let postRangeLow;

	let { title } = $$props,
		{ intro } = $$props,
		{ components } = $$props,
		{ content } = $$props,
		{ allContent } = $$props;

	let allPosts = allContent.filter(content => content.type == "blog");
	let totalPosts = allPosts.length;
	let totalPages = Math.ceil(totalPosts / postsPerPage);

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("intro" in $$props) $$invalidate(1, intro = $$props.intro);
		if ("components" in $$props) $$invalidate(2, components = $$props.components);
		if ("content" in $$props) $$invalidate(3, content = $$props.content);
		if ("allContent" in $$props) $$invalidate(4, allContent = $$props.allContent);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*content*/ 8) {
			$: $$invalidate(5, currentPage = content.pager);
		}

		if ($$self.$$.dirty & /*currentPage*/ 32) {
			$: $$invalidate(6, postRangeHigh = currentPage * postsPerPage);
		}

		if ($$self.$$.dirty & /*postRangeHigh*/ 64) {
			$: postRangeLow = postRangeHigh - postsPerPage;
		}
	};

	return [title, intro, components, content, allContent, currentPage, postRangeHigh];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			intro: 1,
			components: 2,
			content: 3,
			allContent: 4
		});
	}
}

export default Component;