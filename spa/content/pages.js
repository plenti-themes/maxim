/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Uses from '../components/source.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (47:10) {#each description as paragraph}
function create_each_block(ctx) {
	let p;
	let raw_value = /*paragraph*/ ctx[5] + "";

	return {
		c() {
			p = element("p");
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 2 && raw_value !== (raw_value = /*paragraph*/ ctx[5] + "")) p.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (52:8) {#if cms}
function create_if_block(ctx) {
	let p;
	let t0;
	let button;
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			p = element("p");
			t0 = text("Try it out: ");
			button = element("button");
			t1 = text("Login");
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Try it out: ");
			button = claim_element(p_nodes, "BUTTON", {});
			var button_nodes = children(button);
			t1 = claim_text(button_nodes, "Login");
			button_nodes.forEach(detach);
			p_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, button);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*login*/ ctx[4])) /*login*/ ctx[4].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let main;
	let section0;
	let div1;
	let div0;
	let h2;
	let t0;
	let t1;
	let ol;
	let li0;
	let a0;
	let t2;
	let t3;
	let li1;
	let t4;
	let t5;
	let section1;
	let div3;
	let div2;
	let t6;
	let t7;
	let uses;
	let t8;
	let p;
	let a1;
	let t9;
	let current;
	let each_value = /*description*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*cms*/ ctx[3] && create_if_block(ctx);
	uses = new Uses({ props: { content: /*content*/ ctx[2] } });

	return {
		c() {
			main = element("main");
			section0 = element("section");
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text("Inner Page");
			t1 = space();
			ol = element("ol");
			li0 = element("li");
			a0 = element("a");
			t2 = text("Home");
			t3 = space();
			li1 = element("li");
			t4 = text(/*title*/ ctx[0]);
			t5 = space();
			section1 = element("section");
			div3 = element("div");
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = space();
			if (if_block) if_block.c();
			t7 = space();
			create_component(uses.$$.fragment);
			t8 = space();
			p = element("p");
			a1 = element("a");
			t9 = text("Back home");
			this.h();
		},
		l(nodes) {
			main = claim_element(nodes, "MAIN", {});
			var main_nodes = children(main);
			section0 = claim_element(main_nodes, "SECTION", { class: true });
			var section0_nodes = children(section0);
			div1 = claim_element(section0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Inner Page");
			h2_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			ol = claim_element(div0_nodes, "OL", {});
			var ol_nodes = children(ol);
			li0 = claim_element(ol_nodes, "LI", {});
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t2 = claim_text(a0_nodes, "Home");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t3 = claim_space(ol_nodes);
			li1 = claim_element(ol_nodes, "LI", {});
			var li1_nodes = children(li1);
			t4 = claim_text(li1_nodes, /*title*/ ctx[0]);
			li1_nodes.forEach(detach);
			ol_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t5 = claim_space(main_nodes);
			section1 = claim_element(main_nodes, "SECTION", { class: true });
			var section1_nodes = children(section1);
			div3 = claim_element(section1_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach);
			t6 = claim_space(div3_nodes);
			if (if_block) if_block.l(div3_nodes);
			t7 = claim_space(div3_nodes);
			claim_component(uses.$$.fragment, div3_nodes);
			t8 = claim_space(div3_nodes);
			p = claim_element(div3_nodes, "P", {});
			var p_nodes = children(p);
			a1 = claim_element(p_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t9 = claim_text(a1_nodes, "Back home");
			a1_nodes.forEach(detach);
			p_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			main_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "href", "index.html");
			attr(div0, "class", "d-flex justify-content-between align-items-center");
			attr(div1, "class", "container");
			attr(section0, "class", "breadcrumbs");
			attr(a1, "href", ".");
			attr(div3, "class", "container");
			attr(section1, "class", "inner-page");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section0);
			append(section0, div1);
			append(div1, div0);
			append(div0, h2);
			append(h2, t0);
			append(div0, t1);
			append(div0, ol);
			append(ol, li0);
			append(li0, a0);
			append(a0, t2);
			append(ol, t3);
			append(ol, li1);
			append(li1, t4);
			append(main, t5);
			append(main, section1);
			append(section1, div3);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append(div3, t6);
			if (if_block) if_block.m(div3, null);
			append(div3, t7);
			mount_component(uses, div3, null);
			append(div3, t8);
			append(div3, p);
			append(p, a1);
			append(a1, t9);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data(t4, /*title*/ ctx[0]);

			if (dirty & /*description*/ 2) {
				each_value = /*description*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*cms*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div3, t7);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const uses_changes = {};
			if (dirty & /*content*/ 4) uses_changes.content = /*content*/ ctx[2];
			uses.$set(uses_changes);
		},
		i(local) {
			if (current) return;
			transition_in(uses.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uses.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
			destroy_component(uses);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ description } = $$props,
		{ content } = $$props,
		{ cms } = $$props,
		{ login } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
		if ("content" in $$props) $$invalidate(2, content = $$props.content);
		if ("cms" in $$props) $$invalidate(3, cms = $$props.cms);
		if ("login" in $$props) $$invalidate(4, login = $$props.login);
	};

	return [title, description, content, cms, login];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			description: 1,
			content: 2,
			cms: 3,
			login: 4
		});
	}
}

export default Component;