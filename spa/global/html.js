/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Head from './head.js';

// import Nav from './nav.svelte';
// import Footer from './footer.svelte';
import { makeTitle } from '../scripts/make_title.js';

import Header from './header.js';
import Tallfooter from './tallfooter.js';

function create_if_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*AdminMenu*/ ctx[7];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*AdminMenu*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment(ctx) {
	let html;
	let head;
	let t0;
	let body;
	let t1;
	let header;
	let t2;
	let switch_instance;
	let t3;
	let tallfooter;
	let t4;
	let script0;
	let script0_src_value;
	let t5;
	let script1;
	let script1_src_value;
	let t6;
	let script2;
	let script2_src_value;
	let t7;
	let script3;
	let script3_src_value;
	let t8;
	let script4;
	let script4_src_value;
	let t9;
	let script5;
	let script5_src_value;
	let t10;
	let script6;
	let script6_src_value;
	let current;

	head = new Head({
			props: {
				title: makeTitle(/*content*/ ctx[0].filename),
				env: /*env*/ ctx[4]
			}
		});

	let if_block = /*user*/ ctx[5] && create_if_block(ctx);
	header = new Header({});

	const switch_instance_spread_levels = [
		/*content*/ ctx[0].fields,
		{ content: /*content*/ ctx[0] },
		{ allContent: /*allContent*/ ctx[2] },
		{ allLayouts: /*allLayouts*/ ctx[3] },
		{ login: /*login*/ ctx[6] }
	];

	var switch_value = /*layout*/ ctx[1];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const tallfooter_spread_levels = [/*content*/ ctx[0].fields];
	let tallfooter_props = {};

	for (let i = 0; i < tallfooter_spread_levels.length; i += 1) {
		tallfooter_props = assign(tallfooter_props, tallfooter_spread_levels[i]);
	}

	tallfooter = new Tallfooter({ props: tallfooter_props });

	return {
		c() {
			html = element("html");
			create_component(head.$$.fragment);
			t0 = space();
			body = element("body");
			if (if_block) if_block.c();
			t1 = space();
			create_component(header.$$.fragment);
			t2 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t3 = space();
			create_component(tallfooter.$$.fragment);
			t4 = space();
			script0 = element("script");
			t5 = space();
			script1 = element("script");
			t6 = space();
			script2 = element("script");
			t7 = space();
			script3 = element("script");
			t8 = space();
			script4 = element("script");
			t9 = space();
			script5 = element("script");
			t10 = space();
			script6 = element("script");
			this.h();
		},
		l(nodes) {
			html = claim_element(nodes, "HTML", { lang: true });
			var html_nodes = children(html);
			claim_component(head.$$.fragment, html_nodes);
			t0 = claim_space(html_nodes);
			body = claim_element(html_nodes, "BODY", {});
			var body_nodes = children(body);
			if (if_block) if_block.l(body_nodes);
			t1 = claim_space(body_nodes);
			claim_component(header.$$.fragment, body_nodes);
			t2 = claim_space(body_nodes);
			if (switch_instance) claim_component(switch_instance.$$.fragment, body_nodes);
			t3 = claim_space(body_nodes);
			claim_component(tallfooter.$$.fragment, body_nodes);
			t4 = claim_space(body_nodes);
			script0 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script0_nodes = children(script0);
			script0_nodes.forEach(detach);
			t5 = claim_space(body_nodes);
			script1 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script1_nodes = children(script1);
			script1_nodes.forEach(detach);
			t6 = claim_space(body_nodes);
			script2 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script2_nodes = children(script2);
			script2_nodes.forEach(detach);
			t7 = claim_space(body_nodes);
			script3 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script3_nodes = children(script3);
			script3_nodes.forEach(detach);
			t8 = claim_space(body_nodes);
			script4 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script4_nodes = children(script4);
			script4_nodes.forEach(detach);
			t9 = claim_space(body_nodes);
			script5 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script5_nodes = children(script5);
			script5_nodes.forEach(detach);
			t10 = claim_space(body_nodes);
			script6 = claim_element(body_nodes, "SCRIPT", { src: true });
			var script6_nodes = children(script6);
			script6_nodes.forEach(detach);
			body_nodes.forEach(detach);
			html_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (script0.src !== (script0_src_value = "assets/vendor/aos/aos.js")) attr(script0, "src", script0_src_value);
			if (script1.src !== (script1_src_value = "assets/vendor/bootstrap/js/bootstrap.bundle.min.js")) attr(script1, "src", script1_src_value);
			if (script2.src !== (script2_src_value = "assets/vendor/glightbox/js/glightbox.min.js")) attr(script2, "src", script2_src_value);
			if (script3.src !== (script3_src_value = "assets/vendor/isotope-layout/isotope.pkgd.min.js")) attr(script3, "src", script3_src_value);
			if (script4.src !== (script4_src_value = "assets/vendor/swiper/swiper-bundle.min.js")) attr(script4, "src", script4_src_value);
			if (script5.src !== (script5_src_value = "assets/vendor/php-email-form/validate.js")) attr(script5, "src", script5_src_value);
			if (script6.src !== (script6_src_value = "assets/js/main.js")) attr(script6, "src", script6_src_value);
			attr(html, "lang", "en");
		},
		m(target, anchor) {
			insert(target, html, anchor);
			mount_component(head, html, null);
			append(html, t0);
			append(html, body);
			if (if_block) if_block.m(body, null);
			append(body, t1);
			mount_component(header, body, null);
			append(body, t2);

			if (switch_instance) {
				mount_component(switch_instance, body, null);
			}

			append(body, t3);
			mount_component(tallfooter, body, null);
			append(body, t4);
			append(body, script0);
			append(body, t5);
			append(body, script1);
			append(body, t6);
			append(body, script2);
			append(body, t7);
			append(body, script3);
			append(body, t8);
			append(body, script4);
			append(body, t9);
			append(body, script5);
			append(body, t10);
			append(body, script6);
			current = true;
		},
		p(ctx, [dirty]) {
			const head_changes = {};
			if (dirty & /*content*/ 1) head_changes.title = makeTitle(/*content*/ ctx[0].filename);
			if (dirty & /*env*/ 16) head_changes.env = /*env*/ ctx[4];
			head.$set(head_changes);

			if (/*user*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*user*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(body, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const switch_instance_changes = (dirty & /*content, allContent, allLayouts, login*/ 77)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*content*/ 1 && get_spread_object(/*content*/ ctx[0].fields),
					dirty & /*content*/ 1 && { content: /*content*/ ctx[0] },
					dirty & /*allContent*/ 4 && { allContent: /*allContent*/ ctx[2] },
					dirty & /*allLayouts*/ 8 && { allLayouts: /*allLayouts*/ ctx[3] },
					dirty & /*login*/ 64 && { login: /*login*/ ctx[6] }
				])
			: {};

			if (switch_value !== (switch_value = /*layout*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, body, t3);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			const tallfooter_changes = (dirty & /*content*/ 1)
			? get_spread_update(tallfooter_spread_levels, [get_spread_object(/*content*/ ctx[0].fields)])
			: {};

			tallfooter.$set(tallfooter_changes);
		},
		i(local) {
			if (current) return;
			transition_in(head.$$.fragment, local);
			transition_in(if_block);
			transition_in(header.$$.fragment, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			transition_in(tallfooter.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(head.$$.fragment, local);
			transition_out(if_block);
			transition_out(header.$$.fragment, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			transition_out(tallfooter.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(html);
			destroy_component(head);
			if (if_block) if_block.d();
			destroy_component(header);
			if (switch_instance) destroy_component(switch_instance);
			destroy_component(tallfooter);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { content } = $$props,
		{ layout } = $$props,
		{ allContent } = $$props,
		{ allLayouts } = $$props,
		{ env } = $$props,
		{ user } = $$props,
		{ login } = $$props,
		{ AdminMenu } = $$props,
		{ title } = $$props;

	$$self.$$set = $$props => {
		if ("content" in $$props) $$invalidate(0, content = $$props.content);
		if ("layout" in $$props) $$invalidate(1, layout = $$props.layout);
		if ("allContent" in $$props) $$invalidate(2, allContent = $$props.allContent);
		if ("allLayouts" in $$props) $$invalidate(3, allLayouts = $$props.allLayouts);
		if ("env" in $$props) $$invalidate(4, env = $$props.env);
		if ("user" in $$props) $$invalidate(5, user = $$props.user);
		if ("login" in $$props) $$invalidate(6, login = $$props.login);
		if ("AdminMenu" in $$props) $$invalidate(7, AdminMenu = $$props.AdminMenu);
		if ("title" in $$props) $$invalidate(8, title = $$props.title);
	};

	return [content, layout, allContent, allLayouts, env, user, login, AdminMenu, title];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			content: 0,
			layout: 1,
			allContent: 2,
			allLayouts: 3,
			env: 4,
			user: 5,
			login: 6,
			AdminMenu: 7,
			title: 8
		});
	}
}

export default Component;